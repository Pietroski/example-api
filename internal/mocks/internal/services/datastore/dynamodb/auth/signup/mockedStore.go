// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/SimpleOpenBadge/authentication-api/internal/services/datastore/dynamodb/auth/signup (interfaces: Store)

// Package mockedSignUpStore is a generated GoMock package.
package mockedSignUpStore

import (
	context "context"
	reflect "reflect"

	signup "github.com/SimpleOpenBadge/authentication-api/internal/services/datastore/dynamodb/auth/signup"
	gomock "github.com/golang/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// DeleteIssuer mocks base method.
func (m *MockStore) DeleteIssuer(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIssuer", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteIssuer indicates an expected call of DeleteIssuer.
func (mr *MockStoreMockRecorder) DeleteIssuer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIssuer", reflect.TypeOf((*MockStore)(nil).DeleteIssuer), arg0, arg1)
}

// GetIssuer mocks base method.
func (m *MockStore) GetIssuer(arg0 context.Context, arg1 string) (*signup.Issuer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIssuer", arg0, arg1)
	ret0, _ := ret[0].(*signup.Issuer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIssuer indicates an expected call of GetIssuer.
func (mr *MockStoreMockRecorder) GetIssuer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIssuer", reflect.TypeOf((*MockStore)(nil).GetIssuer), arg0, arg1)
}

// ListIssuers mocks base method.
func (m *MockStore) ListIssuers(arg0 context.Context) ([]*signup.Issuer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIssuers", arg0)
	ret0, _ := ret[0].([]*signup.Issuer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIssuers indicates an expected call of ListIssuers.
func (mr *MockStoreMockRecorder) ListIssuers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIssuers", reflect.TypeOf((*MockStore)(nil).ListIssuers), arg0)
}

// StoreIssuer mocks base method.
func (m *MockStore) StoreIssuer(arg0 context.Context, arg1 *signup.Issuer) (*signup.Issuer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreIssuer", arg0, arg1)
	ret0, _ := ret[0].(*signup.Issuer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreIssuer indicates an expected call of StoreIssuer.
func (mr *MockStoreMockRecorder) StoreIssuer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreIssuer", reflect.TypeOf((*MockStore)(nil).StoreIssuer), arg0, arg1)
}
