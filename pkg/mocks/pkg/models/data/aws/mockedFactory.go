// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/SimpleOpenBadge/authentication-api/pkg/models/data/aws (interfaces: LambdaFactory)

// Package mockedFactory is a generated GoMock package.
package mockedFactory

import (
	context "context"
	reflect "reflect"

	events "github.com/aws/aws-lambda-go/events"
	gomock "github.com/golang/mock/gomock"
)

// MockLambdaFactory is a mock of LambdaFactory interface.
type MockLambdaFactory struct {
	ctrl     *gomock.Controller
	recorder *MockLambdaFactoryMockRecorder
}

// MockLambdaFactoryMockRecorder is the mock recorder for MockLambdaFactory.
type MockLambdaFactoryMockRecorder struct {
	mock *MockLambdaFactory
}

// NewMockLambdaFactory creates a new mock instance.
func NewMockLambdaFactory(ctrl *gomock.Controller) *MockLambdaFactory {
	mock := &MockLambdaFactory{ctrl: ctrl}
	mock.recorder = &MockLambdaFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLambdaFactory) EXPECT() *MockLambdaFactoryMockRecorder {
	return m.recorder
}

// Handler mocks base method.
func (m *MockLambdaFactory) Handler(arg0 context.Context, arg1 events.APIGatewayProxyRequest) (*events.APIGatewayProxyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handler", arg0, arg1)
	ret0, _ := ret[0].(*events.APIGatewayProxyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Handler indicates an expected call of Handler.
func (mr *MockLambdaFactoryMockRecorder) Handler(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handler", reflect.TypeOf((*MockLambdaFactory)(nil).Handler), arg0, arg1)
}

// Start mocks base method.
func (m *MockLambdaFactory) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start.
func (mr *MockLambdaFactoryMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockLambdaFactory)(nil).Start))
}
